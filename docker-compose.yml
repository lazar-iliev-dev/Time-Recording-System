services:
  db:
    image: postgres:17-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  backend:
    build: ./backend
    depends_on:
      - db
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      EDGE_SECRET: ${EDGE_SECRET}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app   # Dev only: bind source for live dev
    restart: unless-stopped

  frontend:
    build: ./frontend
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_API_URL: "http://backend:8000"
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:delegated   # bind source for live dev
      - frontend_node_modules:/app/node_modules  # container-managed node_modules
    restart: unless-stopped

  edge-sim:
    build: ./edge
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      BACKEND_URL: "http://backend:8000"
      EDGE_SECRET: ${EDGE_SECRET}
    ports:
      - "9000:9000"
    volumes:
      - ./edge:/app
    restart: unless-stopped

volumes:
  db_data:
  frontend_node_modules:
